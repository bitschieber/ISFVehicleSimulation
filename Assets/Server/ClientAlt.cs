//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.0
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using System.Threading;
using System.Text;


namespace AssemblyCSharp
{
	public class StateObject{
		public Socket workSocket = null;
		public const int BUFFER_SIZE = 1024;
		public byte[] buffer = new byte[BUFFER_SIZE];
		public StringBuilder sb = new StringBuilder();
	}

	public class ClientAlt
	{
		int BufferSize = 2048;
		TcpClient _tcpClient;


		public ClientAlt (string ip, int port)
		{
			_tcpClient = new TcpClient(ip,port);
			try{
				StartReceive2();
				//client.GetStream().BeginRead(readBuffer, 0, READ_BUFFER_SIZE, new AsyncCallback(DoRead), null);
			}
			catch(Exception ex){
			}
		}
		/*
		private void StartReceive()
		{
			byte[] buffer = new byte[BufferSize];
			
			try
			{
				_tcpClient.Client.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, DataReceived, buffer);
			}
			catch {  }
		}


		private void DataReceived(IAsyncResult ar)
		{
			StateObject so = (StateObject) ar.AsyncState;
			Socket s = so.workSocket;
			
			int read = s.EndReceive(ar);
			
			if (read > 0) {
				so.sb.Append(Encoding.ASCII.GetString(so.buffer, 0, read));
				//s.BeginReceive(so.buffer, 0, StateObject.BUFFER_SIZE, 0, new AsyncCallback(Async_Send_Receive.Read_Callback), so);
			}
			else{
				if (so.sb.Length > 1) {
					//All of the data has been read, so displays it to the console
					string strContent;
					strContent = so.sb.ToString();
					Console.WriteLine(String.Format("Read {0} byte from socket" + 
					                                "data = {1} ", strContent.Length, strContent));
				}
				s.Close();
			}
			StartReceive();
		}
		*/

		private void StartReceive2(){
			NetworkStream netStream = _tcpClient.GetStream ();
			
			if (netStream.CanWrite)
			{
				Byte[] sendBytes = Encoding.UTF8.GetBytes ("Is anybody there?");
				netStream.Write (sendBytes, 0, sendBytes.Length);
			}
			else
			{
				Console.WriteLine ("You cannot write data to this stream.");
				_tcpClient.Close ();
				
				// Closing the tcpClient instance does not close the network stream.
				netStream.Close ();
				return;
			}
			
			if (netStream.CanRead)
			{

				byte[] myReadBuffer = new byte[1024];
				netStream.BeginRead(myReadBuffer, 0, myReadBuffer.Length, 
				                    new AsyncCallback(myReadCallBack), 
				                    netStream); 


				/*
				// Reads NetworkStream into a byte buffer.
				byte[] bytes = new byte[_tcpClient.ReceiveBufferSize];
				
				// Read can return anything from 0 to numBytesToRead. 
				// This method blocks until at least one byte is read.
				netStream.Read (bytes, 0, (int)_tcpClient.ReceiveBufferSize);
				
				// Returns the data received from the host to the console.
				string returndata = Encoding.UTF8.GetString (bytes);
				
				Console.WriteLine ("This is what the host returned to you: " + returndata);
				*/
				
			}
			else
			{
				Console.WriteLine ("You cannot read data from this stream.");
				_tcpClient.Close ();
				
				// Closing the tcpClient instance does not close the network stream.
				netStream.Close ();
				return;
			}
			//netStream.Close();
		}

		public static void myReadCallBack(IAsyncResult ar ){
			
			NetworkStream myNetworkStream = (NetworkStream)ar.AsyncState;
			byte[] myReadBuffer = new byte[1024];
			String myCompleteMessage = "";
			int numberOfBytesRead;
			
			numberOfBytesRead = myNetworkStream.EndRead(ar);
			myCompleteMessage = 
				String.Concat(myCompleteMessage, Encoding.ASCII.GetString(myReadBuffer, 0, numberOfBytesRead));    
			
			// message received may be larger than buffer size so loop through until you have it all.
			while(myNetworkStream.DataAvailable){
				
				myNetworkStream.BeginRead(myReadBuffer, 0, myReadBuffer.Length, 
				                          new AsyncCallback(myReadCallBack), 
				                          myNetworkStream);  
				
			}
			
			// Print out the received message to the console.
			Console.WriteLine("You received the following message : " +
			                  myCompleteMessage);
		}

	}
}

